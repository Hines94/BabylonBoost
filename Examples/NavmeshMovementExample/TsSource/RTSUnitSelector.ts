import { EntTransform, EntVector3 } from "@engine/EntitySystem/CoreComponents";
import { GetMousePickingRay, PlayerCamera } from "@engine/Camera/PlayerCamera";
import { GameEcosystem } from "@engine/GameEcosystem";
import { RTSWASMWrapper } from "@userCode/RTSWASMWrapper";
import { ActiveSelectedComponent, SelectableComponent } from "@engine/Autogenerated/babylonburst_ServerTypings_autogenerated";
import { CreatePlane, Mesh, MeshBuilder, Vector3 } from "@babylonjs/core";
import { AsyncImageDescription, InstancedMeshTransform, SetTransformArray } from "@engine/AsyncAssets";
import { AngleToRad } from "@engine/Utils/MathUtils";
import { GetSimpleImageMaterial } from "@engine/Materials/SimpleImageMaterial";
import { SetSimpleMaterialTexture } from "@engine/Materials/AsyncSimpleImageMaterial";


export function UpdateUnitSelection(ecosystem:GameEcosystem) {
    //Click to select
    if(ecosystem.InputValues.primaryClick.wasJustActivated()) {
        const ray = GetMousePickingRay(ecosystem);
        const pos = EntVector3.VectorToEnt(ray.origin);
        const dir = EntVector3.VectorToEnt(ray.direction);
        const selectedUnits = RTSWASMWrapper.SelectNearestEntity(pos,dir,ecosystem.wasmWrapper);
    }
    //TODO: Display basic information on selected units?

    if(ecosystem.InputValues.secondaryClick.wasJustActivated()) {
        const ray = GetMousePickingRay(ecosystem);
        const pos = EntVector3.VectorToEnt(ray.origin);
        const dir = EntVector3.VectorToEnt(ray.direction);
        RTSWASMWrapper.IssueUnitsOrder(pos,dir,ecosystem.wasmWrapper);
    }

    UpdateSelectedUnitHighlighting(ecosystem);
}

const visualPlaneIdentifier = "__VISUALUNITSSELECTEDPLANE__";
export function UpdateSelectedUnitHighlighting(ecosystem:GameEcosystem) {
    const allSelectedUnits = ecosystem.wasmWrapper.GetEntitiesWithData([ActiveSelectedComponent,EntTransform],[]);
    //Easier to use a instance runner as methods are setup for us!
    var visualPlane:Mesh = ecosystem.dynamicProperties[visualPlaneIdentifier];
    if(visualPlane === undefined) {
        visualPlane = MeshBuilder.CreatePlane(visualPlaneIdentifier);
        setupSelectionPlane(ecosystem, visualPlane);
        ecosystem.dynamicProperties[visualPlaneIdentifier] = visualPlane;
    }
    const transforms:InstancedMeshTransform[] = [];
    const ents = Object.keys(allSelectedUnits);
    for(var m = 0; m < ents.length;m++) {
        const entId = parseInt(ents[m]);
        const transform = allSelectedUnits[entId][EntTransform.name] as EntTransform;
        const selection = allSelectedUnits[entId][SelectableComponent.name] as SelectableComponent;
        const transformSetup = new InstancedMeshTransform(
            new Vector3(transform.Position.X,transform.Position.Y,transform.Position.Z),
            new Vector3(AngleToRad(90),0,0),
            new Vector3(selection.SelectionScale,selection.SelectionScale,selection.SelectionScale)
        );
        transforms.push(transformSetup);
    }
    if(transforms.length === 0) {
        visualPlane.isVisible = false;
    } else {
        visualPlane.isVisible = true;
        SetTransformArray(transforms,visualPlane);
    }
}

async function setupSelectionPlane(ecosystem: GameEcosystem, visualPlane: Mesh) {
    const simpleMat = GetSimpleImageMaterial(ecosystem.scene);
    visualPlane.material = simpleMat;
    const image = new AsyncImageDescription("Images/DebugTextures","SelectionCircleTexture.png");
    await image.WaitForImageToLoad();
    SetSimpleMaterialTexture(simpleMat,await image.GetImageAsTexture());
}
