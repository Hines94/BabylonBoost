#!/bin/bash

cd() {
    RED='\033[0;31m'
    RESET='\033[0m'
    builtin cd "$@" || { echo -e "${RED}Failed to change directory${RESET}" >&2; exit 1; }
}
to_lower() {
    echo "$1" | tr '[:upper:]' '[:lower:]'
}
remove_if_exists() {
    if [ -f "$1" ]; then
        rm -f "$1"
    fi
}
arg_exists() {
    target_arg="$1"
    shift
    for arg in "$@"; do
        if [ "$arg" = "$target_arg" ]; then
            return 0  # True in shell terms, meaning the argument exists
        fi
    done
    return 1  # False in shell terms, meaning the argument does not exist
}
copy_if_different() {
    local source="$1"
    local destination="$2"

    if [ ! -f "$destination" ] || ! diff -q "$source" "$destination" > /dev/null 2>&1; then
        cp "$source" "$destination"
    else 
      echo "Files identical so no copy: $source"
    fi
}

base_path="$(cd "$(dirname "$0")" && pwd)"
build_dir=${base_path}/build
server_build_dir=${build_dir}/server_build
wasm_build_dir=${build_dir}/wasm_build
run_tests=0
project_Name=BabylonBurst
project_Name_Lower=$(to_lower "${project_Name}")

cd ${base_path}

# Define color variables
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
MAGENTA='\033[0;35m'
RESET='\033[0m'

set -e

# --- END PARAMETER PARSING SECTION --- #

# --- PATH TO CLIENT SECTION --- #

CLIENT_INSTALLATION_PATH="${base_path}/../Client/src"
mkdir -p "$CLIENT_INSTALLATION_PATH/Autogenerated"


# --- END PATH TO CLIENT SECTION --- #

# --- TOOLS MISC SECTION --- #

echo -e "${MAGENTA}Starting Prometheus${RESET}"
cd Tools/prometheus-2.44.0.linux-amd64
./prometheus --config.file=prometheus.yml > /dev/null 2>&1 &
cd ../../

echo -e "${MAGENTA}Creating new build directories${RESET}"
mkdir -p "$build_dir"
cd "$build_dir"
mkdir -p "$server_build_dir"
mkdir -p "$wasm_build_dir"
cd "../"

echo -e "${MAGENTA}Copying .env file${RESET}"
cp ./.env "$server_build_dir/.env"
cp ./.env "$wasm_build_dir/.env"

# --- END TOOLS MISC SECTION --- #

# --- AUTOGENERATION SECTION --- #

if ! arg_exists "-noautogen" "$@"; then
  echo -e "${MAGENTA}Autogenerating Files${RESET}"
  cd "Tools/Autogeneration" 
  if [ "Autogenerator.ts" -nt "build/Autogenerator.js" ]; then
    echo "Autogenerator.ts has been changed. Recompiling..."
    tsc Autogenerator.ts --outDir build --esModuleInterop
  else
    echo "Autogenerator.js is up to date. Skipping compilation. To force recompile re-save Autogenerator.ts"
  fi
  cd build
  if ! node Autogenerator.js;
    then echo -e "${RED}Code Autogeneration Failed. Exiting.${RESET}" 
    exit 1 
  fi 

  copy_if_different "${build_dir}/Autogeneration/ClientTypings_autogenerated.ts" "$CLIENT_INSTALLATION_PATH/Autogenerated/${project_Name_Lower}_ServerTypings_autogenerated.ts"
else
  echo -e "${RED}Autogen Not Run${RESET}"
fi

# --- END AUTOGENERATION SECTION --- #

#Remove tests before build
remove_if_exists ${server_build_dir}/runUnitTests
remove_if_exists ${wasm_build_dir}/runUnitTests.js
remove_if_exists ${wasm_build_dir}/runUnitTests.wasm

# --- BUILD SECTION --- #

if grep -q "^NO_SERVER_BUILD=true$" ${base_path}/.env; then
  echo -e "${RED}--- Set to not build Server in .env ---${RESET}"
else
  echo -e "${MAGENTA}Building Server${RESET}"
  cd "$server_build_dir"
  cmake -G "Unix Makefiles" -DCMAKE_TOOLCHAIN_FILE=${base_path}/Tools/vcpkg/scripts/buildsystems/vcpkg.cmake -DCMAKE_BUILD_TYPE=Debug  ../../
  cmake --build . --config Debug --parallel 8
fi

# --- END BUILD SECTION --- #

# --- WASM SECTION --- #

if grep -q "^NO_WASM_BUILD=true$" ${base_path}/.env; then
  echo -e "${RED}--- Set to not build WASM in .env ---${RESET}"
else
  if ! arg_exists "-nowasm" "$@"; then
      echo -e "${MAGENTA}Building WASM${RESET}"
      cd "$wasm_build_dir"
      source ${base_path}/Tools/Emscripten/emsdk/emsdk_env.sh
      emmake cmake -G "Unix Makefiles" \
        -DCMAKE_TOOLCHAIN_FILE=${base_path}/Tools/vcpkg/scripts/buildsystems/vcpkg.cmake -DCMAKE_BUILD_TYPE=Debug \
        -DVCPKG_CHAINLOAD_TOOLCHAIN_FILE=${base_path}/Tools/Emscripten/emsdk/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake -DCMAKE_BUILD_TYPE=Debug  ../../
      cmake --build . --config Debug --parallel 8

      #Copy WASM files over to client
      if [ ! -f "${CLIENT_INSTALLATION_PATH}/Autogenerated/${project_Name_Lower}_WASM_autogenerated.wasm" ] || ! diff -q ./${project_Name_Lower}_WASM_autogenerated.wasm "${CLIENT_INSTALLATION_PATH}/Autogenerated/${project_Name_Lower}_WASM_autogenerated.wasm" > /dev/null 2>&1; then
        cp ./${project_Name_Lower}_WASM_autogenerated.wasm "${CLIENT_INSTALLATION_PATH}/Autogenerated/${project_Name_Lower}_WASM_autogenerated.wasm"
        cp ./${project_Name_Lower}_WASM_autogenerated.js "${CLIENT_INSTALLATION_PATH}/Autogenerated/${project_Name_Lower}_WASM_autogenerated.js"
      else
        echo ".wasm build same so no copy to client"
      fi
  fi
fi

# --- END WASM SECTION --- #

# --- TEST/FINISH SECTION --- #

# Check the previous command's exit code and the content of .env
if [ $? -eq 0 ]; then

    # Check if tests should be run
    if arg_exists "-t" "$@" && ! grep -q "^NO_TESTS_BUILD=true$" "${base_path}/.env"; then
        echo -e "${MAGENTA}Running Unit Tests...${RESET}"

        # Run server unit tests
        cd "$server_build_dir"
        ./runUnitTests --output-on-failure --gtest_also_run_disabled_tests

        if [ $? -ne 0 ]; then
            echo -e "${RED}Server Unit Tests failed${RESET}"
            exit 1
        fi

        # Run WASM tests if not omitted
        if [ -z "$no_wasm" ]; then
            cd "$wasm_build_dir"
            ctest -V
        fi
    fi

    # Output warnings if builds are omitted
    if grep -q "^NO_TESTS_BUILD=true$" "${base_path}/.env"; then
        echo -e "${RED}--- Set to not build tests in .env ---${RESET}"
    fi
    if grep -q "^NO_SERVER_BUILD=true$" "${base_path}/.env"; then
        echo -e "${RED}--- Set to not build Server in .env ---${RESET}"
    fi
    if grep -q "^NO_WASM_BUILD=true$" "${base_path}/.env"; then
        echo -e "${RED}--- Set to not build WASM in .env ---${RESET}"
    fi

    # Output build completion message
    echo -e "${MAGENTA}Build Done${RESET}"

    #Regular exit
    exit 0
else
    # Build failed, exit with an error
    echo -e "${RED}Build failed${RESET}"
    exit 1
fi

# --- END TEST/FINISH SECTION --- #