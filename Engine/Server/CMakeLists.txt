cmake_minimum_required(VERSION 3.16)
set(CMAKE_CXX_STANDARD 20)

#[[ Cmake Structure:
    - Options
    - General Lib Setup For All Platforms (Server + WASM)
    - General packages (compatible server/WASM)
    - Testing
    - Server
    - WASM
]]

# ------------------------ Options --------------------------

#set(CMAKE_BUILD_TYPE "Release")

#---Profiling---
# set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pg")
# set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -pg")
# set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -pg")
#Use < gprof ./runUnitTests gmon.out > analysis.txt > in build to get readable profile

#------------------------------------------------------------

# -------------------------- .env ---------------------------

file(READ "${CMAKE_SOURCE_DIR}/.env" ENV_CONTENTS)
string(REPLACE "\n" ";" ENV_LINES "${ENV_CONTENTS}")
foreach(LINE ${ENV_LINES})
    # Filter out comments or empty lines
    if (NOT LINE MATCHES "^(#|$)")
        # Extract key and value
        string(REPLACE "=" ";" LINE_PARTS "${LINE}")
        list(GET LINE_PARTS 0 KEY)
        list(GET LINE_PARTS 1 VALUE)

        # Store in ENV_VARS dictionary (emulating $ENV{...})
        set(ENV_VARS_${KEY} "${VALUE}")
    endif()
endforeach()

#------------------------------------------------------------

# --- General Lib Setup For All Platforms (Server + WASM) ---

project(babylonboost)

#Running for WASM?
if(CMAKE_SYSTEM_NAME STREQUAL "Emscripten")# OR DEFINED ENV{VSCODE_CMAKE_TOOLCHAIN_FILE})
    set(wasmBuild TRUE)
else()
    set(wasmBuild FALSE)
endif()

#Setup folders we want
file(GLOB_RECURSE AUTOGENERATED_SOURCES ./build/Autogeneration/*.cpp) # Merge in autogenerated files
file(GLOB_RECURSE LIB_SOURCES ./src/Common/*.cpp)
list(APPEND LIB_SOURCES ${AUTOGENERATED_SOURCES})

#Specific platform folders
if(wasmBuild)
    message("Building for WASM")
    file(GLOB_RECURSE WASM_SOURCES ./src/WASMSpecific/*.cpp)
    list(APPEND LIB_SOURCES ${WASM_SOURCES})
    list(FILTER LIB_SOURCES EXCLUDE REGEX "src/WASMSpecific/WASM_INTERFACE/.*")
    list(FILTER LIB_SOURCES EXCLUDE REGEX ".*/src/WASMSpecific/wasmMain.cpp")
    include_directories(${CMAKE_SOURCE_DIR}/src/WASMSpecific)
    set(DVCPKG_TARGET_TRIPLET "wasm32-emscripten")
else()
    message("Building for Server")
    file(GLOB_RECURSE SERVER_SOURCES ./src/ServerSpecific/*.cpp)
    list(APPEND LIB_SOURCES ${SERVER_SOURCES})  
    list(FILTER LIB_SOURCES EXCLUDE REGEX ".*/src/ServerSpecific/serverMain.cpp")
    include_directories(${CMAKE_SOURCE_DIR}/src/ServerSpecific)
    set(DVCPKG_TARGET_TRIPLET "x64-linux")
endif()

# Optional no physics engine build
if (${ENV_VARS_NO_PHYSICS} STREQUAL "true")
    set(PHYSICS_DISABLED ON) 
    list(FILTER LIB_SOURCES EXCLUDE REGEX "./build/Autogeneration/Common/Engine/Physics/.*$")
    list(FILTER LIB_SOURCES EXCLUDE REGEX "./src/Common/Engine/Physics/.*$")
    message(STATUS "Physics is disabled for this build!")
else()
    add_definitions(-DPHYSICS)
endif()

# Remove any test files from the main library
list(FILTER LIB_SOURCES EXCLUDE REGEX ".*/Tests/.*")

add_library(babylonboostlib ${LIB_SOURCES})

# -----------------------------------------------------------

# ------- General packages (compatible server/WASM) ---------

list(APPEND CMAKE_PREFIX_PATH "${CMAKE_CURRENT_SOURCE_DIR}/Tools/vcpkg/installed/${DVCPKG_TARGET_TRIPLET}")

if (NOT PHYSICS_DISABLED)
    find_package(Bullet CONFIG REQUIRED)
endif()
find_package(msgpack-cxx CONFIG REQUIRED)
find_package(nlohmann_json CONFIG REQUIRED)
find_package(ZLIB REQUIRED)
find_package(PkgConfig REQUIRED)
find_path(TINYGLTF_INCLUDE_DIRS "tiny_gltf.h")

set(LINK_LIBRARIES 
    msgpack-cxx
    nlohmann_json::nlohmann_json
    ZLIB::ZLIB
)

if(NOT PHYSICS_DISABLED)
    list(APPEND LINK_LIBRARIES ${BULLET_LIBRARIES})
endif()

target_link_libraries(babylonboostlib PRIVATE ${LINK_LIBRARIES})

target_include_directories(babylonboostlib PRIVATE 
    ${TINYGLTF_INCLUDE_DIRS}
    ${MSGPACK_CXX_INCLUDE_DIRS}
    "${CMAKE_CURRENT_SOURCE_DIR}/Tools/vcpkg/installed/${DVCPKG_TARGET_TRIPLET}/include" 
)

include_directories(${CMAKE_BINARY_DIR}/Autogeneration) # Include any autogenerated headers
include_directories(${CMAKE_SOURCE_DIR}/src/Common) # so our autogenerated code can find original
if (NOT PHYSICS_DISABLED)
    include_directories("${CMAKE_CURRENT_SOURCE_DIR}/Tools/vcpkg/installed/${DVCPKG_TARGET_TRIPLET}/include/bullet")
endif()

# -----------------------------------------------------------

# --------------------- Testing -----------------------------
enable_testing()

# All test files are in src/Tests
file(GLOB_RECURSE TEST_SOURCES CONFIGURE_DEPENDS ./src/*/Tests/*.cpp)
message("Test Sources: ${TEST_SOURCES}")
add_executable(runUnitTests ${TEST_SOURCES})

find_package(GTest CONFIG REQUIRED)
target_link_libraries(runUnitTests PRIVATE babylonboostlib GTest::gtest GTest::gtest_main)

target_include_directories(runUnitTests PRIVATE 
    ${UWEBSOCKETS_INCLUDE_DIRS}
)

if(wasmBuild)
    add_test(
        NAME runUnitTests
        COMMAND runUnitTests
    )
else()
    add_test(
        NAME runUnitTests
        COMMAND node runUnitTests
    )
endif()

# -----------------------------------------------------------

# -------------------------- Server -------------------------

#Non Emscripten packages
if(NOT CMAKE_SYSTEM_NAME STREQUAL "Emscripten")
    find_package(TBB CONFIG REQUIRED)
    find_package(AWSSDK REQUIRED COMPONENTS s3)
    find_package(prometheus-cpp CONFIG REQUIRED) # - PROBLEMS WITH EMSCRIPTEN
    pkg_check_modules(LIBZIP REQUIRED libzip) # - PROBLEMS WITH EMSCRIPTEN
    target_link_libraries(babylonboostlib PRIVATE 
        TBB::tbb 
        TBB::tbbmalloc
        "${CMAKE_CURRENT_SOURCE_DIR}/Tools/vcpkg/installed/${DVCPKG_TARGET_TRIPLET}/lib/libuSockets.a" 
        prometheus-cpp::core prometheus-cpp::pull 
        ${LIBZIP_LIBRARIES}
        ${AWSSDK_LINK_LIBRARIES}
    )
    find_path(UWEBSOCKETS_INCLUDE_DIRS "uwebsockets/App.h" 
        PATHS "./Tools/vcpkg/installed/${DVCPKG_TARGET_TRIPLET}/include")
    target_include_directories(babylonboostlib PRIVATE 
        ${LIBZIP_INCLUDE_DIRS}
        ${UWEBSOCKETS_INCLUDE_DIRS}
    )
endif()

#Create the server executable
if(NOT CMAKE_SYSTEM_NAME STREQUAL "Emscripten")
    add_executable(babylonboostserver ./src/ServerSpecific/Engine/serverMain.cpp) 
    target_link_libraries(babylonboostserver PRIVATE babylonboostlib)
    target_include_directories(babylonboostserver PRIVATE 
        ${UWEBSOCKETS_INCLUDE_DIRS}
    )
endif()

# -----------------------------------------------------------

# -------------------------- WASM ---------------------------

if(CMAKE_SYSTEM_NAME STREQUAL "Emscripten")
    add_executable(babylonboost_WASM_autogenerated ./src/WASMSpecific/Engine/wasmMain.cpp) 
    target_link_options(babylonboost_WASM_autogenerated PRIVATE 
        "SHELL:-s MODULARIZE=1"
        "SHELL:--bind" 
        "SHELL:-s EXPORT_ES6=1"
        "SHELL:-s WASM=1"
        "SHELL:-s ALLOW_MEMORY_GROWTH=1"
        "SHELL:-s \"EXPORTED_RUNTIME_METHODS=['ccall', 'cwrap']\""
        #"SHELL:-s NO_DISABLE_EXCEPTION_CATCHING" - For full builds catch?
        "SHELL:-Oz"
        "SHELL:-flto"
        #"SHELL:--strip-debug" - TODO: If prod build?
    )
    file(GLOB WASM_INTERFACE_SOURCES ./src/WASMSpecific/Engine/WASM_INTERFACE/*.cpp)
    target_sources(babylonboost_WASM_autogenerated PRIVATE ${WASM_INTERFACE_SOURCES})
    target_link_libraries(babylonboost_WASM_autogenerated PRIVATE 
        msgpack-cxx
    )
    target_link_libraries(babylonboost_WASM_autogenerated PRIVATE babylonboostlib)
endif()

# -----------------------------------------------------------