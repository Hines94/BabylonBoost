import { CreateAutogenFile } from "../Autogenerator";
import { FileStructs } from "../Utils/ComponentPropertyReader";
import { WriteFileIfChanged } from "../Utils/InvalidFileRemover";
import { RemovePlatformSpecificIncludePath } from "../Utils/PlatformUtils";
import { GetTrackedVariablesHSetup } from "./TrackedVariable/TrackedVariableHeaderAutogen";

function createHAutogenBase(relativeDir: string, fileNameExten: string, outputFile: string) : string {
    //Generate output
    let output = `// Autogenerated file from the 'Autogenerator.ts' tool prepass\n`;
    if(relativeDir === "") {
        output += `#include "${fileNameExten}"\n`;
    } else {
        output += `#include "${relativeDir}/${fileNameExten}"\n`;
    }
    return output;
}


//Run the autogeneration for a .h based on the file we are currently running
export function RunHeaderAutogeneration(fileCode:string,basePath:string,filePath:string) {
    const structNames = Object.keys(FileStructs);
    if(structNames.length == 0){
        RemoveAutogeneratedHeader();
        return;
    }

    //Create the autogen file
    let { relativeDir, fileName, fileNameExten, outputFile } = CreateAutogenFile(basePath,filePath,".h");

    //Common, Server specific etc are a given, so remove them
    relativeDir = RemovePlatformSpecificIncludePath(relativeDir);

    //Populate content
    let output =  GetTrackedVariablesHSetup();

    if(output === "") {
        RemoveAutogeneratedHeader();
        return;
    }

    //Write output
    WriteFileIfChanged(outputFile,createHAutogenBase(relativeDir, fileNameExten, outputFile)+output);

    //Include add in original file
    const newAutogeneratedHeader = relativeDir.replace(".h","").replace(".hpp","")+"/"+fileName+"_autogenerated.h";
    var newAutogeneratedCode = removeAutogeneratedSection(fileCode) + `\n\n//---- AUTOGENERATED ---\n#include "${newAutogeneratedHeader}"\n//--- AUTOGENERATED END ---`;
    WriteFileIfChanged(filePath,newAutogeneratedCode);

    function RemoveAutogeneratedHeader() {
        const newAutogeneratedCode = removeAutogeneratedSection(fileCode);
        WriteFileIfChanged(filePath, newAutogeneratedCode);
    }
}

function removeAutogeneratedSection(str: string): string {
    const regex = /\/\/---- AUTOGENERATED ---[\s\S]*?\/\/--- AUTOGENERATED END ---\s*/;
    return str.replace(regex, '').trim();
}