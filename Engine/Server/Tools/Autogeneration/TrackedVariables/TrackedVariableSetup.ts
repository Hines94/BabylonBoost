import { CreateAutogenFile,  sourcePath } from "../Autogenerator";
import { AllOtherStructs, StructHasCproperty } from "../Utils/ComponentPropertyReader";
import { WriteFileIfChanged } from "../Utils/InvalidFileRemover";


export function GenerateTrackedVariableSpecialisations() {
    const basePath = sourcePath;
    GenerateAutogeneratedDatastructures(basePath,"Common");
    GenerateAutogeneratedDatastructures(basePath,"ServerSpecific");
    GenerateAutogeneratedDatastructures(basePath,"WASMSpecific");
}

function GenerateAutogeneratedDatastructures(basePath:string,module:string) {
    var fileName = "SpecificTrackedDatastructures";
    if(module === "Common") {
        fileName ="CommonTrackedDatastructures";
    }
    var path = basePath+"/"+module+"/Engine/"+fileName;
    let { relativeDir, fileNameExten, outputFile } = CreateAutogenFile(basePath,path,".h");
    var headerOutput = `//Autogenerated for setting up Tracked datastructures\n#pragma once\n#include "Engine/Entities/TrackedVariableForwardDeclare.hpp"`;
    if(CustomDatastructuresExistForType(module)){
        headerOutput += GetTrackedVariableHSetup(module);
    }
    WriteFileIfChanged(outputFile,headerOutput);
}

function CustomDatastructuresExistForType(module:string) {
    const compNames = Object.keys(AllOtherStructs);
    for(var c = 0;c <compNames.length;c++){
        const comp = compNames[c];
        const compData = AllOtherStructs[comp];
        if(compData.isComponent) {
            continue;
        }
        if(compData.properties.length === 0) {
            continue;
        }
        if(!compData.fullPath.includes(module)) {
            continue;
        }
        return true;
    }
    return false;
}

function GetTrackedVariableHSetup(module:string) : string {
    var ret = "";
    const compNames = Object.keys(AllOtherStructs);

    compNames.forEach(comp=>{
        const compData = AllOtherStructs[comp];
        if(compData.isComponent) {
            return;
        }
        if(compData.properties.length === 0 || !StructHasCproperty(compData)) {
            return;
        }
        if(!compData.fullPath.includes(module)) {
            return;
        }
        ret += `\nclass ${comp};\n`;
        ret += `template <>\n`;
        ret += `class TrackedVariable<${comp}>;\n`;
    })

    return ret;
}