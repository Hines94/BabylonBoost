/*
	Autogenerated from 'ClientTypingsAutogenerator.ts'. Makes keeping track of types server->client easier.
	Mark with CPROPERTY(NOTYPINGS) to stop auto addition to typings 
	Use TODO: class CustomClientTyping inheritance to change the type of a data item 
*/

export type EntityData = number; //TODO: Custom typings as this is manually set! 

/** Contains all parts etc for a ship. Easy way to iterate through all parts and get their data */
export class MasterShipDetails {
	AllParts: EntityData[];
}

/** Eg a pawn or ship - something that can be taken control of by a character or AI */
export class ControllableEntity {
	/** The controller that controls this controllable entity */
	CurrentController: EntityData;
}

/** Part of the controllable entity - responsible for controling our linear movement - forward, backward, inert damp etc */
export class ControllableMover {
	ControllableForceAppliers: EntityData[];
}

/** Part of the controllable entity - responsible for controling our rotation, look towards etc */
export class ControllableRotator {
	ControllableRotators: EntityData[];
}

/**  Generic transform struct which can be added to any component */
export class EntTransform {
	Position: EntVector3;
	Rotation: EntVector4;
	Scale: EntVector3;
}

/**  Used to identify entities that are spawned from prefabs */
export class Prefab {
	/** __EDITORREADONLY__ */
	InstanceOwner: EntityData;
	/** UUID that can be used to identify saved prefabs and diff vs their default components__EDITORREADONLY__ */
	PrefabIdentifier: string;
	/** Entity index vs this prefab (i.e we are entity 1 in the prefab)__EDITORREADONLY__ */
	EntityIndex: number;
}

/** An entity that holds details on a spawned Prefab */
export class PrefabInstance {
	PrefabUUID: string;
	/** __EDITORREADONLY__ */
	PrefabEntities: EntityData[];
}

export class ClientLerpTransform {
	/** Ammt of time to lerp from(need a margin so we don't run out of packets) */
	HistoricTime: number;
	static GetRequiredComponents() { return [EntTransform]; }
}

export class CapsuleCollider {
	Height: number;
	Width: number;
}

/** Applies liner forces to one or several rigidbodies per frame */
export class LinearForceEngine {
	Enabled: boolean;
}

export class PhysicsCollider {
	AwsPath: string;
	MeshName: string;
	static GetRequiredComponents() { return [EntTransform]; }
}

export class RigidBody {
	Mass: number;
	static GetRequiredComponents() { return [EntTransform]; }
}

/** A rotation "engine" that can be used to rotate an object about using physics */
export class RotationEngine {
	Enabled: boolean;
	/** TODO: Replace this with axis - eg pitch up/down */
	RotationPower: number;
	StabilityMultiplier: number;
}

/** Manages building controls for the player */
export class PlayerBuildingComponent {
	CurrentBuildItem: EntityData;
}

/** Our player controller - deals with requesting movement to controlled entity and tracking what */
export class PlayerController {
	Playeruuid: string;
	ControlledPawn: EntityData;
	CurrentControllingEntity: EntityData;
}

/**  A pawn that can be controlled by our player */
export class PlayerPawn {
}

export class InstancedRender {
	AwsPath: string;
	MeshName: string;
	static GetRequiredComponents() { return [EntTransform]; }
}

/** List of valid component types to add to an Entity */
export const ComponentTypes = [
	MasterShipDetails,
	ControllableEntity,
	ControllableMover,
	ControllableRotator,
	EntTransform,
	Prefab,
	PrefabInstance,
	ClientLerpTransform,
	CapsuleCollider,
	LinearForceEngine,
	PhysicsCollider,
	RigidBody,
	RotationEngine,
	PlayerBuildingComponent,
	PlayerController,
	PlayerPawn,
	InstancedRender,
];

/* -------- DATA ITEMS -------- */

export class EntVector3 {
	X: number;
	Y: number;
	Z: number;
}

export class EntVector4 {
	X: number;
	Y: number;
	Z: number;
	W: number;
}


/* -------- ENUMS -------- */


/* -------- JSON Schema -------- */

/** Schema types so we can dynamically generate data for components */
export const componentSchemas: {[id:string]:string} = {
    "MasterShipDetails": "{\n    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n    \"$ref\": \"#/definitions/MasterShipDetails\",\n    \"definitions\": {\n        \"MasterShipDetails\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"AllParts\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"number\"\n                    }\n                }\n            },\n            \"required\": [\n                \"AllParts\"\n            ],\n            \"additionalProperties\": false,\n            \"description\": \"Contains all parts etc for a ship. Easy way to iterate through all parts and get their data\"\n        }\n    }\n}",
    "ControllableEntity": "{\n    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n    \"$ref\": \"#/definitions/ControllableEntity\",\n    \"definitions\": {\n        \"ControllableEntity\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"CurrentController\": {\n                    \"type\": \"number\",\n                    \"description\": \"The controller that controls this controllable entity\"\n                }\n            },\n            \"required\": [\n                \"CurrentController\"\n            ],\n            \"additionalProperties\": false,\n            \"description\": \"Eg a pawn or ship - something that can be taken control of by a character or AI\"\n        }\n    }\n}",
    "ControllableMover": "{\n    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n    \"$ref\": \"#/definitions/ControllableMover\",\n    \"definitions\": {\n        \"ControllableMover\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"ControllableForceAppliers\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"number\"\n                    }\n                }\n            },\n            \"required\": [\n                \"ControllableForceAppliers\"\n            ],\n            \"additionalProperties\": false,\n            \"description\": \"Part of the controllable entity - responsible for controling our linear movement - forward, backward, inert damp etc\"\n        }\n    }\n}",
    "ControllableRotator": "{\n    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n    \"$ref\": \"#/definitions/ControllableRotator\",\n    \"definitions\": {\n        \"ControllableRotator\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"ControllableRotators\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"number\"\n                    }\n                }\n            },\n            \"required\": [\n                \"ControllableRotators\"\n            ],\n            \"additionalProperties\": false,\n            \"description\": \"Part of the controllable entity - responsible for controling our rotation, look towards etc\"\n        }\n    }\n}",
    "EntTransform": "{\n    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n    \"$ref\": \"#/definitions/EntTransform\",\n    \"definitions\": {\n        \"EntTransform\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"Position\": {\n                    \"$ref\": \"#/definitions/EntVector3\"\n                },\n                \"Rotation\": {\n                    \"$ref\": \"#/definitions/EntVector4\"\n                },\n                \"Scale\": {\n                    \"$ref\": \"#/definitions/EntVector3\"\n                }\n            },\n            \"required\": [\n                \"Position\",\n                \"Rotation\",\n                \"Scale\"\n            ],\n            \"additionalProperties\": false,\n            \"description\": \"Generic transform struct which can be added to any component\"\n        },\n        \"EntVector3\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"X\": {\n                    \"type\": \"number\"\n                },\n                \"Y\": {\n                    \"type\": \"number\"\n                },\n                \"Z\": {\n                    \"type\": \"number\"\n                }\n            },\n            \"required\": [\n                \"X\",\n                \"Y\",\n                \"Z\"\n            ],\n            \"additionalProperties\": false\n        },\n        \"EntVector4\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"X\": {\n                    \"type\": \"number\"\n                },\n                \"Y\": {\n                    \"type\": \"number\"\n                },\n                \"Z\": {\n                    \"type\": \"number\"\n                },\n                \"W\": {\n                    \"type\": \"number\"\n                }\n            },\n            \"required\": [\n                \"X\",\n                \"Y\",\n                \"Z\",\n                \"W\"\n            ],\n            \"additionalProperties\": false\n        }\n    }\n}",
    "Prefab": "{\n    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n    \"$ref\": \"#/definitions/Prefab\",\n    \"definitions\": {\n        \"Prefab\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"InstanceOwner\": {\n                    \"type\": \"number\",\n                    \"description\": \"__EDITORREADONLY__\"\n                },\n                \"PrefabIdentifier\": {\n                    \"type\": \"string\",\n                    \"description\": \"UUID that can be used to identify saved prefabs and diff vs their default components__EDITORREADONLY__\"\n                },\n                \"EntityIndex\": {\n                    \"type\": \"number\",\n                    \"description\": \"Entity index vs this prefab (i.e we are entity 1 in the prefab)__EDITORREADONLY__\"\n                }\n            },\n            \"required\": [\n                \"InstanceOwner\",\n                \"PrefabIdentifier\",\n                \"EntityIndex\"\n            ],\n            \"additionalProperties\": false,\n            \"description\": \"Used to identify entities that are spawned from prefabs\"\n        }\n    }\n}",
    "PrefabInstance": "{\n    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n    \"$ref\": \"#/definitions/PrefabInstance\",\n    \"definitions\": {\n        \"PrefabInstance\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"PrefabUUID\": {\n                    \"type\": \"string\"\n                },\n                \"PrefabEntities\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"number\"\n                    },\n                    \"description\": \"__EDITORREADONLY__\"\n                }\n            },\n            \"required\": [\n                \"PrefabUUID\",\n                \"PrefabEntities\"\n            ],\n            \"additionalProperties\": false,\n            \"description\": \"An entity that holds details on a spawned Prefab\"\n        }\n    }\n}",
    "ClientLerpTransform": "{\n    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n    \"$ref\": \"#/definitions/ClientLerpTransform\",\n    \"definitions\": {\n        \"ClientLerpTransform\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"HistoricTime\": {\n                    \"type\": \"number\",\n                    \"description\": \"Ammt of time to lerp from(need a margin so we don't run out of packets)\"\n                }\n            },\n            \"required\": [\n                \"HistoricTime\"\n            ],\n            \"additionalProperties\": false\n        }\n    }\n}",
    "CapsuleCollider": "{\n    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n    \"$ref\": \"#/definitions/CapsuleCollider\",\n    \"definitions\": {\n        \"CapsuleCollider\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"Height\": {\n                    \"type\": \"number\"\n                },\n                \"Width\": {\n                    \"type\": \"number\"\n                }\n            },\n            \"required\": [\n                \"Height\",\n                \"Width\"\n            ],\n            \"additionalProperties\": false\n        }\n    }\n}",
    "LinearForceEngine": "{\n    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n    \"$ref\": \"#/definitions/LinearForceEngine\",\n    \"definitions\": {\n        \"LinearForceEngine\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"Enabled\": {\n                    \"type\": \"boolean\"\n                }\n            },\n            \"required\": [\n                \"Enabled\"\n            ],\n            \"additionalProperties\": false,\n            \"description\": \"Applies liner forces to one or several rigidbodies per frame\"\n        }\n    }\n}",
    "PhysicsCollider": "{\n    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n    \"$ref\": \"#/definitions/PhysicsCollider\",\n    \"definitions\": {\n        \"PhysicsCollider\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"AwsPath\": {\n                    \"type\": \"string\"\n                },\n                \"MeshName\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"required\": [\n                \"AwsPath\",\n                \"MeshName\"\n            ],\n            \"additionalProperties\": false\n        }\n    }\n}",
    "RigidBody": "{\n    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n    \"$ref\": \"#/definitions/RigidBody\",\n    \"definitions\": {\n        \"RigidBody\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"Mass\": {\n                    \"type\": \"number\"\n                }\n            },\n            \"required\": [\n                \"Mass\"\n            ],\n            \"additionalProperties\": false\n        }\n    }\n}",
    "RotationEngine": "{\n    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n    \"$ref\": \"#/definitions/RotationEngine\",\n    \"definitions\": {\n        \"RotationEngine\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"Enabled\": {\n                    \"type\": \"boolean\"\n                },\n                \"RotationPower\": {\n                    \"type\": \"number\",\n                    \"description\": \"TODO: Replace this with axis - eg pitch up/down\"\n                },\n                \"StabilityMultiplier\": {\n                    \"type\": \"number\"\n                }\n            },\n            \"required\": [\n                \"Enabled\",\n                \"RotationPower\",\n                \"StabilityMultiplier\"\n            ],\n            \"additionalProperties\": false,\n            \"description\": \"A rotation \\\"engine\\\" that can be used to rotate an object about using physics\"\n        }\n    }\n}",
    "PlayerBuildingComponent": "{\n    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n    \"$ref\": \"#/definitions/PlayerBuildingComponent\",\n    \"definitions\": {\n        \"PlayerBuildingComponent\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"CurrentBuildItem\": {\n                    \"type\": \"number\"\n                }\n            },\n            \"required\": [\n                \"CurrentBuildItem\"\n            ],\n            \"additionalProperties\": false,\n            \"description\": \"Manages building controls for the player\"\n        }\n    }\n}",
    "PlayerController": "{\n    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n    \"$ref\": \"#/definitions/PlayerController\",\n    \"definitions\": {\n        \"PlayerController\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"Playeruuid\": {\n                    \"type\": \"string\"\n                },\n                \"ControlledPawn\": {\n                    \"type\": \"number\"\n                },\n                \"CurrentControllingEntity\": {\n                    \"type\": \"number\"\n                }\n            },\n            \"required\": [\n                \"Playeruuid\",\n                \"ControlledPawn\",\n                \"CurrentControllingEntity\"\n            ],\n            \"additionalProperties\": false,\n            \"description\": \"Our player controller - deals with requesting movement to controlled entity and tracking what\"\n        }\n    }\n}",
    "PlayerPawn": "{\n    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n    \"$ref\": \"#/definitions/PlayerPawn\",\n    \"definitions\": {\n        \"PlayerPawn\": {\n            \"type\": \"object\",\n            \"additionalProperties\": false,\n            \"description\": \"A pawn that can be controlled by our player\"\n        }\n    }\n}",
    "InstancedRender": "{\n    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n    \"$ref\": \"#/definitions/InstancedRender\",\n    \"definitions\": {\n        \"InstancedRender\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"AwsPath\": {\n                    \"type\": \"string\"\n                },\n                \"MeshName\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"required\": [\n                \"AwsPath\",\n                \"MeshName\"\n            ],\n            \"additionalProperties\": false\n        }\n    }\n}",
    "EntVector3": "{\n    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n    \"$ref\": \"#/definitions/EntVector3\",\n    \"definitions\": {\n        \"EntVector3\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"X\": {\n                    \"type\": \"number\"\n                },\n                \"Y\": {\n                    \"type\": \"number\"\n                },\n                \"Z\": {\n                    \"type\": \"number\"\n                }\n            },\n            \"required\": [\n                \"X\",\n                \"Y\",\n                \"Z\"\n            ],\n            \"additionalProperties\": false\n        }\n    }\n}",
    "EntVector4": "{\n    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n    \"$ref\": \"#/definitions/EntVector4\",\n    \"definitions\": {\n        \"EntVector4\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"X\": {\n                    \"type\": \"number\"\n                },\n                \"Y\": {\n                    \"type\": \"number\"\n                },\n                \"Z\": {\n                    \"type\": \"number\"\n                },\n                \"W\": {\n                    \"type\": \"number\"\n                }\n            },\n            \"required\": [\n                \"X\",\n                \"Y\",\n                \"Z\",\n                \"W\"\n            ],\n            \"additionalProperties\": false\n        }\n    }\n}"
}